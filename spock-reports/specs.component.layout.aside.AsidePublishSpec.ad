= Report for specs.component.layout.aside.AsidePublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:15:52 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|12|100.0% |21.588 seconds |0 |0 |0
|====

== Features

=== Functionality of Component in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.639 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XS-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XS-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.523 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-SM-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-SM-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.544 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-MD-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-MD-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.557 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-LG-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-LG-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.880 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XLG-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XLG-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.033 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#plainaside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content"
takeScreenshot($(selector).firstElement(), "Should have sample rich text")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XXLG-Should-have-sample-rich-text.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-in-XXLG-Should-have-sample-rich-text.png"]

|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component with Background in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.472 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XS-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XS-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component with Background in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.424 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-SM-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-SM-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component with Background in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.481 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-MD-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-MD-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component with Background in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.692 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-LG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-LG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component with Background in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.738 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component with Background in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.197 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "Aside"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#asidewithbackground"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XXLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/aside/AsidePublishSpec/Functionality-of-Component-with-Background-in-XXLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .text[component]").text().trim() == "Aside Content with Background"
----

| 
|====

* **And** Section should have a background image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).css("background-image").contains(".png")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

