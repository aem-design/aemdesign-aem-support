= Report for specs.component.lists.listnav.ListNavPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 04:34:42 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|7|100.0% |44.657 seconds |0 |0 |0
|====

== Features

=== Functionality of Component with Default variant and Child List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.640 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component with Default variant and Child List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.844 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component with Default variant and Child List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.788 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component with Default variant and Child List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.739 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component with Default variant and Child List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.183 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component with Default variant and Child List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.228 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnav1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-with-Default-variant-and-Child-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Inherited in Footer **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 25.295 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List Nav"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#listnavDescendants"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-Inherited-in-Footer-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/listnav/ListNavPublishSpec/Functionality-of-Component-Inherited-in-Footer-The-component-should-be-on-the-page.png"]

|====

* **And** Descendants list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .first .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1.html")
----

| 
|====

* **Then** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Static list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Static list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page1.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **And** Static list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Static list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page1/page1.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page1/page2.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page2.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page2/page1.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page2/page2.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page3.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page2 > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page1/page3/page1.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **And** Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **And** Static list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **And** Looping Descendants list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .next").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3")
----

| 
|====

* **And** Looping Descendants with Badge list should point to next element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .next .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page2")
----

| 
|====

* **When** I navigate to next page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/list-nav/pages/page2.html")
----

| 
|====

* **Then** Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendants .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **And** Static list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavStatic .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .previous").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **And** Looping Descendants list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoop .first").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to previous element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .previous .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1 > Page3 > Page1")
----

| 
|====

* **And** Looping Descendants with Badge list should point to first element in list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("#listnavDescendantsLoopBadge .first .card-link").firstElement().getAttribute("textContent").trim().contains("List Nav > Pages > Page1")
----

| 
|====

=====

