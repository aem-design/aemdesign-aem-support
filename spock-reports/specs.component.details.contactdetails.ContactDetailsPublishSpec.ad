= Report for specs.component.details.contactdetails.ContactDetailsPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:19:03 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|19|100.0% |40.583 seconds |0 |0 |0
|====

== Features

=== Functionality of Component variant Default without included components in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.000 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default without included components in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.052 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default without included components in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.095 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default without included components in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.071 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default without included components in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.517 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default without included components in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.488 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-without-included-components-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail from Uploaded Image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Author: Max Barrass"
----

| 
|====

* **And** Has Description line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().trim() == "Adobe Practice lead for Isobar max.barrass@isobar.com"
----

| 
|====

* **And** Has Description has field jobTitle

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=jobTitle]").text().trim() == "Adobe Practice lead"
----

| 
|====

* **And** Has Description has field employee

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=employee]").text().trim() == "Isobar"
----

| 
|====

* **And** Has Description has field email

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description [itemprop=email]").text().trim() == "max.barrass@isobar.com"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.016 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.053 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.881 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.271 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.926 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Default Blank without included components in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.674 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/contactdetails/ContactDetailsPublishSpec/Functionality-of-Component-variant-Default-Blank-without-included-components-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **And** Has Image with Alt Title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt").trim() == "Contact Details"
----

| 
|====

* **And** Has Image with Page Image as Thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/content/aemdesign-showcase/au/en/component/details/contact-details.thumb.319.319.png")
----

| 
|====

* **And** Has Title line with content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text().trim() == "Contact Details"
----

| 
|====

* **And** Has Description should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text().isEmpty()
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.349 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.408 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.577 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.633 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.665 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Functionality of Component variant Hidden in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.822 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Component should have no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").text() == ""
----

| 
|====

* **Where:** 

=====

=== Contact Details: Default metadata added to page **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.772 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Contact Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contact-details"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Page has metadata field og:title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("meta[property='og:title']").attr("content").equals("Contact Details")
----

| 
|====

* **And** Page has metadata field og:type

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("meta[property='og:type']").attr("content").equals("article")
----

| 
|====

* **And** Page has metadata field og:image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("meta[property='og:image']").attr("content").contains("contact-details.thumb.")
----

| 
|====

* **And** Page has metadata field og:url

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("meta[property='og:url']").attr("content").contains("details/contact-details.html")
----

| 
|====

* **And** Page has canonical link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("link[rel='canonical']").attr("href").contains("details/contact-details.html")
----

| 
|====

=====

