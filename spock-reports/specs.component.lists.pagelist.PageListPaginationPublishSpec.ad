= Report for specs.component.lists.pagelist.PageListPaginationPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 04:32:07 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|6|100.0% |56.247 seconds |0 |0 |0
|====

== Features

=== Functionality of Component with Default variant and Horizontal Badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.283 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XS-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component with Default variant and Horizontal Badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.445 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-SM-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component with Default variant and Horizontal Badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.638 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-MD-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component with Default variant and Horizontal Badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.767 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-LG-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component with Default variant and Horizontal Badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 9.770 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XLG-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component with Default variant and Horizontal Badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 10.433 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List" > "Pagination"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has one list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 1
----

| 
|====

* **And** Only next link exists on first page, without previous link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert $("${selector} > .pagination > .next").isDisplayed()
assert !$("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **And** Has pagination details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .pagination .current").text().trim() == "1"
takeScreenshot($(selector).firstElement(), "The component should be on first page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-first-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-first-page.png"]

|====

* **And** Can select page 2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "2"
takeScreenshot($(selector).firstElement(), "The component should be on second page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-second-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-second-page.png"]

|====

* **And** Can select page 3

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "3"
takeScreenshot($(selector).firstElement(), "The component should be on third page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-third-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-third-page.png"]

|====

* **And** Can select page 4

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "4"
takeScreenshot($(selector).firstElement(), "The component should be on forth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-forth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-forth-page.png"]

|====

* **And** Can select page 5

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
$("${selector} > .pagination > .next > a").click()
assert $("${selector} .pagination .current").text().trim() == "5"
takeScreenshot($(selector).firstElement(), "The component should be on fifth page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-fifth-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPaginationPublishSpec/Functionality-of-Component-with-Default-variant-and-Horizontal-Badge-in-XXLG-The-component-should-be-on-fifth-page.png"]

|====

* **And** Only previous link exists on last page, without next link

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
scrollIntoView($("${selector} .pagination").firstElement())
assert !$("${selector} > .pagination > .next").isDisplayed()
assert $("${selector} > .pagination > .previous").isDisplayed()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

