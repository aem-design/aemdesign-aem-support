= Report for specs.component.widgets.onlinemedia.OnlineMediaPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 06:00:11 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|18|100.0% |39.732 seconds |0 |0 |2
|====

== Features

=== Functionality of Component Variant: Default in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.468 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/001-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XS-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/001-001-Functionality of Component Variant_ Default in XS-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/001-001-Functionality of Component Variant_ Default in XS-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.920 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/002-001-Functionality%20of%20Component%20Variant_%20Default%20in%20SM-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/002-001-Functionality of Component Variant_ Default in SM-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/002-001-Functionality of Component Variant_ Default in SM-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.869 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/003-001-Functionality%20of%20Component%20Variant_%20Default%20in%20MD-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/003-001-Functionality of Component Variant_ Default in MD-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/003-001-Functionality of Component Variant_ Default in MD-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.996 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/004-001-Functionality%20of%20Component%20Variant_%20Default%20in%20LG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/004-001-Functionality of Component Variant_ Default in LG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/004-001-Functionality of Component Variant_ Default in LG-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.280 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/005-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XLG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/005-001-Functionality of Component Variant_ Default in XLG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/005-001-Functionality of Component Variant_ Default in XLG-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.126 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/006-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XXLG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/006-001-Functionality of Component Variant_ Default in XXLG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/006-001-Functionality of Component Variant_ Default in XXLG-The component should be on the page.png"]

|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("default")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with YouTube in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.631 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with YouTube in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.009 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with YouTube in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.786 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with YouTube in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.854 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with YouTube in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.841 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with YouTube in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.105 seconds

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("youtube")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("tL46xeIV5mc")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Kaltura **IGNORED** [big]#icon:eye-slash[role="gray"]#

=====



Result: **IGNORED** [big]#icon:eye-slash[role="gray"]#
Time: 0

* **Given:** >the page hierarchy is created as "Components" > "Widgets" > "OnlineMedia"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

| 
|====

* **And** Should have default media provider

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaprovider").contains("kaltura")
----

| 
|====

* **And** Should have media id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaid").contains("1_lph7zzb1")
----

| 
|====

* **And** Should have media title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediatitle").contains("kaltura video")
----

| 
|====

* **And** Should have media partner id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediapartnerid").contains("_691292")
----

| 
|====

* **And** Should have media player id

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("data-mediaplayerid").contains("20499062")
----

| 
|====

* **And** Should have set width

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("width").toInteger() == 1000
----

| 
|====

* **And** Should have set height

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("height").toInteger() == 850
----

| 
|====

* **Where:** Browser size width: #viewport.width and height: #viewport.height

=====

=== Functionality of Component Variant: IFrame with Youtube Video **IGNORED** [big]#icon:eye-slash[role="gray"]#

=====



Result: **IGNORED** [big]#icon:eye-slash[role="gray"]#
Time: 0

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

| 
|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//www.youtube.com/embed/Dk7h22mRYHQ")
----

| 
|====

* **And** Should have boolean attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("allowfullscreen")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **And** Should have schema itemtype='http://schema.org/VideoObject'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("itemtype").equals("http://schema.org/VideoObject")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.289 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.251 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.476 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.248 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.651 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: IFrame with Vimeo Video in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.471 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Online Media"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#onlinemedia5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/widgets/onlinemedia/OnlineMediaPublishSpec/Functionality-of-Component-Variant-IFrame-with-Vimeo-Video-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Should have sample src set

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("src").contains("//player.vimeo.com/video/8733915")
----

| 
|====

* **And** Should have class modifier 'embed-responsive'

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).hasClass("embed-responsive")
----

| 
|====

* **Where:** 

=====

