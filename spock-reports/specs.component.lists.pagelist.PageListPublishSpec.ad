= Report for specs.component.lists.pagelist.PageListPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 04:16:35 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|79|100.0% |5 minutes, 53.780 seconds |0 |0 |0
|====

== Features

=== Page List: Default variant using Default badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.197 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Default badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.258 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Default badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.557 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Default badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.392 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Default badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.527 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Default badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.496 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Default-badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.first").text().trim() == "Page1"
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.last").text().trim() == "Page5"
----

| 
|====

* **And** Has three plain items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.item").size() == 3
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default variant using Icon badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.678 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Icon badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.179 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Icon badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.976 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Icon badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.506 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Icon badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.357 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Icon badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.411 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Icon-badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has icon as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li i").size() == 3
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default variant using Image badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.969 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Image badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.300 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Image badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.179 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Image badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.516 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Image badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.558 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Image badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.960 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Image-badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has image as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").size() == 5
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default variant using Card badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.890 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Card badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.038 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Card badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.866 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Card badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.362 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Card badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.550 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Card badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.120 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 5
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default variant using Horizontal badge in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.897 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Horizontal badge in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.274 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Horizontal badge in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.935 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Horizontal badge in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.282 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Horizontal badge in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.525 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Horizontal badge in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.211 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Horizontal-badge-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Has card as contents

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li .card").size() == 3
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.506 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.605 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.761 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.709 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.807 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.923 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Has no content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .content > child").isEmpty() == true
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Badge: Card with Image, Title, Description and Action in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.207 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Badge: Card with Image, Title, Description and Action in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.119 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Badge: Card with Image, Title, Description and Action in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.257 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Badge: Card with Image, Title, Description and Action in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.421 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Badge: Card with Image, Title, Description and Action in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.906 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Badge: Card with Image, Title, Description and Action in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.574 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist29"
def selectorContainer = "#contentblock29 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Badge-Card-with-Image-Title-Description-and-Action-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has image in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-img-top > img").attr("alt") == "Page1"
----

| 
|====

* **And** Has title in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > h3").text() == "Page1"
----

| 
|====

* **And** Has description in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div.card-text").text() == "Page with Licensed Page Image, with non-Licensed Secondary Image and with Background non-Licensed Image"
----

| 
|====

* **And** Has call to action in first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} > div > ul > li.first > div > div.card-body > div > a").text().toUpperCase() == "BUTTON TEXT"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default variant using Card badge with List Split every 2 in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.927 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default variant using Card badge with List Split every 2 in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.216 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default variant using Card badge with List Split every 2 in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.312 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default variant using Card badge with List Split every 2 in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.467 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default variant using Card badge with List Split every 2 in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.477 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default variant using Card badge with List Split every 2 in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.065 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist30"
def selectorContainer = "#contentblock30 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-variant-using-Card-badge-with-List-Split-every-2-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has three lists

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").size() == 3
----

| 
|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(0).find("li").size() == 2
----

| 
|====

* **And** Second list has two items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(1).find("li").size() == 2
----

| 
|====

* **And** Third list has one items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul").getAt(2).find("li").size() == 1
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default with Thumbnail Override in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.162 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XS-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XS-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default with Thumbnail Override in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.460 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-SM-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-SM-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default with Thumbnail Override in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.921 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-MD-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-MD-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default with Thumbnail Override in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.299 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-LG-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-LG-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default with Thumbnail Override in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.289 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XLG-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XLG-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default with Thumbnail Override in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.459 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist31"
def selectorContainer = "#contentblock31 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from list

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/cablecar.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from list")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XXLG-Last-item-should-have-thumbnail-override-from-list.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-with-Thumbnail-Override-in-XXLG-Last-item-should-have-thumbnail-override-from-list.png"]

|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Default without Thumbnail Override in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.259 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XS-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XS-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Default without Thumbnail Override in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.348 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-SM-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-SM-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Default without Thumbnail Override in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.611 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-MD-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-MD-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Default without Thumbnail Override in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.930 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-LG-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-LG-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Default without Thumbnail Override in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.381 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XLG-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XLG-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Default without Thumbnail Override in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.337 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist32"
def selectorContainer = "#contentblock32 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 3
----

| 
|====

* **And** Last item should have thumbnail override from page details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li img").getAt(0).attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Last item should have thumbnail override from page details")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XXLG-Last-item-should-have-thumbnail-override-from-page-details.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Default-without-Thumbnail-Override-in-XXLG-Last-item-should-have-thumbnail-override-from-page-details.png"]

|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Pages with Analytics XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.005 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XS-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Pages with Analytics SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.993 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-SM-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Pages with Analytics MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.290 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-MD-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Pages with Analytics LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.384 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-LG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Pages with Analytics XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.432 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Pages with Analytics XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.501 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist33"
def selectorContainer = "#contentblock33 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("link")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("pagelist")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Pages with Title and Description Trim **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.303 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist34"
def selectorContainer = "#contentblock34 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Title-and-Description-Trim-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Title-and-Description-Trim-The-component-should-be-on-the-page.png"]

|====

* **And** Page Title Should be trimmed

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li .card-title").getAt(0).text().equals("Pag...")
----

| 
|====

* **And** Page Description Should be trimmed

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li .card-text").getAt(0).text().equals("Page with ..more")
----

| 
|====

=====

=== Page List: Pages with Analytics Track Only XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.043 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XS-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Pages with Analytics Track Only SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.205 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-SM-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Pages with Analytics Track Only MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.295 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-MD-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Pages with Analytics Track Only LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.340 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-LG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Pages with Analytics Track Only XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.579 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Pages with Analytics Track Only XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.709 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Page List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist35"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-Analytics-Track-Only-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** First page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-track").equals("true")
----

| 
|====

* **And** First page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-label").equals("badge Link Description")
----

| 
|====

* **And** First page link should have attribute: data-layer-location

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(0).attr("data-layer-location").equals("")
----

| 
|====

* **And** Second page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Second page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(1).attr("data-layer-label").equals("Badge Link")
----

| 
|====

* **And** Third page link should have attribute: data-layer-track

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-track").equals("true")
----

| 
|====

* **And** Third page link should have attribute: data-layer-label

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ul li a").getAt(2).attr("data-layer-label").equals("Page3")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Page List: Pages with no Details in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.631 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Page List: Pages with no Details in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.764 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Page List: Pages with no Details in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.988 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Page List: Pages with no Details in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.409 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Page List: Pages with no Details in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.656 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Page List: Pages with no Details in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.322 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#pagelist36"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/pagelist/PageListPublishSpec/Page-List-Pages-with-no-Details-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five items of page missing details

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .page-missing-details").size() == 5
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

