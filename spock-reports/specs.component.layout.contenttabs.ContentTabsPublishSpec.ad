= Report for specs.component.layout.contenttabs.ContentTabsPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:06:28 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|18|100.0% |58.262 seconds |0 |0 |0
|====

== Features

=== Functionality of Component with List of Children Pages in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.631 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XS-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XS-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XS-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Children Pages in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.954 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-SM-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-SM-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-SM-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Children Pages in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.493 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-MD-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-MD-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-MD-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Children Pages in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.095 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-LG-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-LG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-LG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Children Pages in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.489 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XLG-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XLG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XLG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Children Pages in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.783 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XXLG-Should-have-sample-content.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 1"
----

| 
|====

* **And** Tab breadcrumb should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .breadcrumb li.active").getAt(0).text().trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page title should match current page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetitle")[0].getAttribute("innerText").trim() == "Content Tabs"
----

| 
|====

* **And** Tab contents page tags should only have one tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "_page1 .pagetags li").size() == 1
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav-link").getAt(1).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Tab Page Content 2"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XXLG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Children-Pages-in-XXLG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.200 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XS-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XS-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XS-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XS-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.843 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-SM-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-SM-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-SM-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-SM-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.237 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-MD-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-MD-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-MD-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-MD-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.595 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-LG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-LG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-LG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-LG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.487 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XLG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XLG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component with List of Static Pages in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.555 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XXLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XXLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** First tab should be active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block"
----

| 
|====

* **When** I select second tab

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector + " .nav.nav-tabs").find("li").getAt(1).find("a").getAt(0).click()
----

| 
|====

* **Then** Second tab content show be visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Content Block Lock"
takeScreenshot($(selector).firstElement(), "Second tab content show be visible")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XXLG-Second-tab-content-show-be-visible.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-with-List-of-Static-Pages-in-XXLG-Second-tab-content-show-be-visible.png"]

|====

* **Where:** 

=====

=== Functionality of Component Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.959 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XS-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XS-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.336 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-SM-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-SM-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.875 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-MD-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-MD-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.652 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-LG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-LG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.995 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.981 seconds

* **Given:** >the page hierarchy is created as "Components" > "Layout" > "ContentTabs"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#contenttabs3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
takeScreenshot($(selector).firstElement(), "I am on the component showcase page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XXLG-I-am-on-the-component-showcase-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/layout/contenttabs/ContentTabsPublishSpec/Functionality-of-Component-Empty-in-XXLG-I-am-on-the-component-showcase-page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample rich text

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + " .nav-link.active").text().trim() == "Empty"
----

| 
|====

* **Where:** 

=====

