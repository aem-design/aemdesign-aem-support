= Report for specs.component.lists.navlist.NavListPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 04:54:47 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|42|100.0% |2 minutes, 46.405 seconds |0 |0 |0
|====

== Features

=== Nav List: Default with Fixed List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.635 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Default with Fixed List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.527 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Default with Fixed List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.520 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Default with Fixed List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.769 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Default with Fixed List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.993 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Default with Fixed List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.799 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Default-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Simple with Fixed List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.560 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Simple with Fixed List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.734 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Simple with Fixed List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.956 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Simple with Fixed List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.254 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Simple with Fixed List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.850 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Simple with Fixed List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.951 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page2")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Stacked with Fixed List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.358 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Stacked with Fixed List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.431 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Stacked with Fixed List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.755 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Stacked with Fixed List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.714 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Stacked with Fixed List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.983 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Stacked with Fixed List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.193 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Fixed-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 2
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **And** Last item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(1).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Simple with Children List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.820 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Simple with Children List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.485 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Simple with Children List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.761 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Simple with Children List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.217 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Simple with Children List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.737 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Simple with Children List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.974 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Simple-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").firstElement().getAttribute("textContent").trim().contains("Page1")
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .menu a").lastElement().getAttribute("textContent").trim().contains("Page5")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Stacked with Children List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.503 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Stacked with Children List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.413 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Stacked with Children List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.384 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Stacked with Children List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.691 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Stacked with Children List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.178 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Stacked with Children List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.056 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has two list items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").size() == 5
----

| 
|====

* **And** Has first item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page1"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(0).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **And** Has last item

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("a.dropdown-toggle").getAttribute("textContent").trim() == "Page5"
----

| 
|====

* **And** First item has five sub items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.dropdown").getAt(4).find("div.dropdown-menu a").size() == 5
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Stacked with Children List has correct current page marks XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.803 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Stacked with Children List has correct current page marks SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.015 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Stacked with Children List has correct current page marks MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.875 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Stacked with Children List has correct current page marks LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.393 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Stacked with Children List has correct current page marks XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.200 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Stacked with Children List has correct current page marks XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.900 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List" > "Pages" > "Page 2" > "Page 2"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#inheritedListInAside"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPageUrl("content/aemdesign-showcase/au/en/component/lists/nav-list/pages/page2/page2.html")
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Stacked-with-Children-List-has-correct-current-page-marks-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five nav items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").size() == 5
----

| 
|====

* **And** Has first menu item not marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert !$("${selector} li.nav-item").getAt(0).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item marked as current

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).getAttribute("class").contains("current")
----

| 
|====

* **And** Has second menu item with link marked as active

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item").getAt(1).find("a.active").size() == 1
----

| 
|====

* **And** Has second menu item with link marked as active should have current link title equals Page2

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li.nav-item.current").find("a.current").firstElement().getAttribute("textContent").trim() == "Page2"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Nav List: Dropdown with Children List in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.319 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Nav List: Dropdown with Children List in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.791 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Nav List: Dropdown with Children List in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.558 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Nav List: Dropdown with Children List in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.455 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Nav List: Dropdown with Children List in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.678 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Nav List: Dropdown with Children List in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.890 seconds

* **Given:** >the page hierarchy is created as "Components" > "Lists" > "Nav List"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#navlist6"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/lists/navlist/NavListPublishSpec/Nav-List-Dropdown-with-Children-List-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has five first level items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} li").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1] > .nav-item").size() == 5
----

| 
|====

* **And** First item has five items

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("[aria-labelledby=navlist6_page1_page1] > .nav-item").size() == 2
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

