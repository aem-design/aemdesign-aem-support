= Report for specs.component.media.image.ImagePublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 06:09:23 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|132|100.0% |7 minutes, 7.748 seconds |0 |0 |0
|====

== Features

=== Functionality of Component Variant: Default in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.714 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.557 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.714 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.199 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.153 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.695 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Only in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.884 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Only in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.154 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Only in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.706 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Only in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.326 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Only in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.282 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Only in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.330 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.069 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.633 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.501 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.277 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.170 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.221 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.558 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.022 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.459 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.803 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.943 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.901 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.557 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.628 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.750 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.457 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.022 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.320 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Only with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.991 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Only with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.784 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Only with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.639 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Only with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.832 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Only with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.967 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Only with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.499 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.419 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.966 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.176 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.434 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.389 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.482 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.314 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.580 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.785 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.579 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.778 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.717 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image8"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city1.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText").equals("Licensed Asset Description")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .license")[0].getAttribute("innerText").trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.069 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.330 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.608 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.603 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.967 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.242 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Overrides in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.303 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Overrides in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.171 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Overrides in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.823 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Overrides in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.641 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Overrides in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.980 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Overrides in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.913 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Overrides-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Only with Overrides in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.214 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Only with Overrides in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.482 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Only with Overrides in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.484 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Only with Overrides in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.389 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Only with Overrides in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.135 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Only with Overrides in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.835 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Only-with-Overrides-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has overridden alt

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Overrides in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.286 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Overrides in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.706 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Overrides in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.337 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Overrides in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.969 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Overrides in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.171 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Overrides in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.973 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Card-with-Overrides-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override Image Title"
----

| 
|====

* **And** Has overridden description with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-text").text() == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.643 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.727 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.244 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.561 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.840 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description with Overrides in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.969 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Overrides-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Can override Image Title"
----

| 
|====

* **And** Has description line with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure .description")[0].getAttribute("innerText") == "Can override Image Description"
----

| 
|====

* **And** Has image with overridden title with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("title") == "Can override Image Title"
----

| 
|====

* **And** Has image with overridden alt with overridden title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("alt") == "Can override Image Headline"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Only Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.400 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Only Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.152 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Only Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.625 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Only Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.776 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Only Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.607 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Only Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.851 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.320 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.043 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.498 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.575 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.451 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.992 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description Empty in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.965 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description Empty in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.988 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description Empty in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.428 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description Empty in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.672 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description Empty in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.587 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description Empty in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.777 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be empty

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).children().size() == 0
----

| 
|====

* **And** Should have empty attribute

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector + "[empty]").size() == 1
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.378 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.602 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.477 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.263 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.724 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.797 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/city3.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "319",
        "MD"  : "319",
        "LG"  : "319",
        "XLG" : "319",
        "XXLG": "319"
]
assert $("${selector} img")
        .getAttribute("src")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.749 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.556 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.288 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.885 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.559 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description with Asset Metadata in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.861 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/city2.jpg/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Asset-Metadata-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "319",
        "SM"  : "1280",
        "MD"  : "1280",
        "LG"  : "1280",
        "XLG" : "1280",
        "XXLG": "1280"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.307 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.596 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.211 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.523 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.956 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Image Title and Description with Adaptive Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.159 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should be using sample image as source

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("data-analytics-filename").endsWith("/city2.jpg")
----

| 
|====

* **And** Should be rendering sample image using current resource

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} picture img").attr("src").contains("/contentblock19/")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Image-Title-and-Description-with-Adaptive-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
assert $("${selector} picture img")
        .getAttribute("currentSrc")
        .contains(
        expectSizes.get(viewport.label)
)
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure figcaption").text() == "Asset Title"
----

| 
|====

* **And** Has description line embedded in Asset

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} figure div.description")[0].getAttribute("innerText") == "Asset Description"
----

| 
|====

* **And** Has no license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").size() == 0
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Generated Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.683 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XS-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Generated Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.737 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-SM-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Generated Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.263 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-MD-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Generated Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.059 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-LG-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Generated Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.240 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XLG-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Generated Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.765 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/contentblock20/par/image.img.")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/image/ImagePublishSpec/Functionality-of-Component-Variant-Default-with-Generated-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Adaptive Image Sizing in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.959 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Adaptive Image Sizing in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.452 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Adaptive Image Sizing in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.517 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Adaptive Image Sizing in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.028 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Adaptive Image Sizing in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.131 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Adaptive Image Sizing in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.366 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "480",
        "SM"  : "640",
        "MD"  : "1024",
        "LG"  : "1440",
        "XLG" : "1920",
        "XXLG": "2048"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.868 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.311 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.367 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.117 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.633 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Default Variant with Image Option - Manual MediaQuery with Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.496 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Image"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#image24"
def selectorContainer = "#contentblock24 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Image dimension should match media query

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def expectSizes = [
        "XS"  : "1280",
        "SM"  : "1280",
        "MD"  : "aem-design-logo",
        "LG"  : "aem-design-logo",
        "XLG" : "aem-design-logo",
        "XXLG": "aem-design-logo"
]
def imgUrl = $("${selector} picture img").getAttribute("currentSrc")
assert imgUrl.contains(expectSizes.get(viewport.label))
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

