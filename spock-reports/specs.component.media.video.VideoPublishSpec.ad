= Report for specs.component.media.video.VideoPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 06:01:50 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|6|100.0% |14.479 seconds |0 |0 |0
|====

== Features

=== Functionality of Component Variant: Default in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.233 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/001-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XS-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/001-001-Functionality of Component Variant_ Default in XS-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/001-001-Functionality of Component Variant_ Default in XS-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.474 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/002-001-Functionality%20of%20Component%20Variant_%20Default%20in%20SM-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/002-001-Functionality of Component Variant_ Default in SM-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/002-001-Functionality of Component Variant_ Default in SM-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.190 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/003-001-Functionality%20of%20Component%20Variant_%20Default%20in%20MD-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/003-001-Functionality of Component Variant_ Default in MD-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/003-001-Functionality of Component Variant_ Default in MD-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.306 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/004-001-Functionality%20of%20Component%20Variant_%20Default%20in%20LG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/004-001-Functionality of Component Variant_ Default in LG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/004-001-Functionality of Component Variant_ Default in LG-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.386 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/005-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XLG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/005-001-Functionality of Component Variant_ Default in XLG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/005-001-Functionality of Component Variant_ Default in XLG-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.811 seconds

* **Given:** >the page hierarchy is created as "Components" > "Media" > "Video"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#video1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
report("The component should be on the page")
----

a| link:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/006-001-Functionality%20of%20Component%20Variant_%20Default%20in%20XXLG-The%20component%20should%20be%20on%20the%20page.html[source html]
image:../../test-reports/geb/specs/component/media/video/VideoPublishSpec/006-001-Functionality of Component Variant_ Default in XXLG-The component should be on the page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/media/video/VideoPublishSpec/006-001-Functionality of Component Variant_ Default in XXLG-The component should be on the page.png"]

|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video source").attr("src").contains("/FishTank.mp4")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/media/video/VideoPublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Should have sample content loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} video").firstElement().getAttribute("readyState") == "4"
----

| 
|====

* **And** Should have sample content playing

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert js.exec("return \$(\"${selector} video\")[0].paused == false;")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

