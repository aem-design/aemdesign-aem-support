= Report for specs.component.details.newsdetails.NewsDetailsPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:24:01 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|18|100.0% |35.264 seconds |0 |0 |0
|====

== Features

=== Functionality of Component with Excluded Components in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.479 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Excluded Components in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.499 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Excluded Components in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.764 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Excluded Components in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.614 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Excluded Components in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.762 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Excluded Components in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.852 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Excluded-Components-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .breadcrumb").isEmpty() == true
----

| 
|====

* **And** Has Toolbar hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == true
----

| 
|====

* **And** Has Parsys hidden

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == true
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.653 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/007-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20XS-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/007-001-Functionality of Component with Included Components in XS-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/007-001-Functionality of Component with Included Components in XS-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XS-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XS-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.709 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/008-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20SM-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/008-001-Functionality of Component with Included Components in SM-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/008-001-Functionality of Component with Included Components in SM-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-SM-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-SM-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.022 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/009-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20MD-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/009-001-Functionality of Component with Included Components in MD-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/009-001-Functionality of Component with Included Components in MD-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-MD-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-MD-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.264 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/010-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20LG-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/010-001-Functionality of Component with Included Components in LG-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/010-001-Functionality of Component with Included Components in LG-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-LG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-LG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.826 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/011-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20XLG-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/011-001-Functionality of Component with Included Components in XLG-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/011-001-Functionality of Component with Included Components in XLG-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component with Included Components in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.954 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "Page Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
report("I am on the component showcase page")
----

a| link:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/012-001-Functionality%20of%20Component%20with%20Included%20Components%20in%20XXLG-I%20am%20on%20the%20component%20showcase%20page.html[source html]
image:../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/012-001-Functionality of Component with Included Components in XXLG-I am on the component showcase page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../test-reports/geb/specs/component/details/newsdetails/NewsDetailsPublishSpec/012-001-Functionality of Component with Included Components in XXLG-I am on the component showcase page.png"]

|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
takeScreenshot($(selector).firstElement(), "The component should be on the page")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XXLG-The-component-should-be-on-the-page.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/details/newsdetails/NewsDetailsPublishSpec/Functionality-of-Component-with-Included-Components-in-XXLG-The-component-should-be-on-the-page.png"]

|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **And** Has Toolbar visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .navbar").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_toolbar").text().trim() == "Text in Toolbar"
----

| 
|====

* **And** Has Parsys visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .text").isEmpty() == false
----

| 
|====

* **And** Has Parsys has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} #text_in_parsys").text().trim() == "Text in Parsys"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.394 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.412 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.577 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 1.931 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.080 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

=== Functionality of News Details Component with Background and Formatted Date in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.272 seconds

* **Given:** >the page hierarchy is created as "Components" > "Details" > "News Details"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#news-details3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** The component should have the date in EEEE dd MMMM YYYY format

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def dateString =  $("${selector} .published time").text()
DateTimeFormatter format = DateTimeFormatter.ofPattern("EEEE dd MMMM yyyy", Locale.ENGLISH)
assert LocalDate.parse(dateString, format)
----

| 
|====

* **And** The component should display tags

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .tags span" , 0).text().contains("News Page") &&
$("${selector} .tags span" , 1).text().contains("Event")
----

| 
|====

* **And** The component should have a title

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert  $("${selector} h1").text().contains("News Details Title")
----

| 
|====

* **And** The component should have a thumbnail image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").css("background-image").contains("city2.jpg")
----

| 
|====

* **And** Has Breadcrumb visible

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} nav.breadcrumb").isEmpty() == false
----

| 
|====

* **And** Has Toolbar has sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} ol.breadcrumb li").first().text().trim() == "AEM.Design Showcase"
----

| 
|====

* **Where:** 

=====

