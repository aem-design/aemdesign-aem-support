= Report for specs.component.content.download.DownloadPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:44:34 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|120|100.0% |8 minutes, 25.859 seconds |0 |0 |0
|====

== Features

=== Functionality of Component Variant: Default in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.141 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XS-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.141 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-SM-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.075 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-MD-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.746 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-LG-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.378 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XLG-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.526 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download1"
def selectorContainer = "#contentblock1 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-in-XXLG-Should-have-sample-content.png"]

|====

* **And** When asset is downloaded it matches repository asset file signature

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert verifyAssetDownload($(selector).firstElement().getAttribute("href"))
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.030 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.933 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.626 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.109 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.959 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.690 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download2"
def selectorContainer = "#contentblock2 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.388 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.746 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.717 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.844 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.797 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.242 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download3"
def selectorContainer = "#contentblock3 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.063 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.318 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.239 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.341 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.785 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.783 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download4"
def selectorContainer = "#contentblock4 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.685 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.765 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.694 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.817 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.893 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.526 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download5"
def selectorContainer = "#contentblock5 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Licensed Image in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.015 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Licensed Image in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.402 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Licensed Image in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.652 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Licensed Image in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.880 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Licensed Image in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.926 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Licensed Image in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.423 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download6"
def selectorContainer = "#contentblock6 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Licensed Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Licensed-Image-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Licensed Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Licensed Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").text().trim() == "?? 2017 Creator Contributor Copyright Image Owner Copyright Owner"
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default without Authored Content in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 2.658 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default without Authored Content in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.629 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default without Authored Content in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.362 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default without Authored Content in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.124 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default without Authored Content in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.285 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default without Authored Content in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.019 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download7"
def selectorContainer = "#contentblock7 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have a placehoder image

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}[empty]").getAttribute("innerHTML").trim() == ""
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Default with Title and Description in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.591 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XS-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Default with Title and Description in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.021 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-SM-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Default with Title and Description in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.213 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-MD-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Default with Title and Description in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.405 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-LG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Default with Title and Description in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.572 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Default with Title and Description in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.152 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download8"
def selectorContainer = "#contentblock8 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Default-with-Title-and-Description-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Title and Description in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.155 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Title and Description in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.492 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Title and Description in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.690 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Title and Description in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.462 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Title and Description in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.269 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Title and Description in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.503 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download9"
def selectorContainer = "#contentblock9 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Title-and-Description-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Title and Description in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.480 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Title and Description in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.792 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Title and Description in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.005 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Title and Description in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.706 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Title and Description in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.076 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Title and Description in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.163 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download10"
def selectorContainer = "#contentblock10 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Can override non-Licensed Image Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Title-and-Description-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Can override non-Licensed Image Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Can override non-Licensed Image Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.474 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.656 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.572 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.321 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.477 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Thumbnail Icon in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.145 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download11"
def selectorContainer = "#contentblock11 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-Icon-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.652 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XS-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.539 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-SM-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.495 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-MD-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.765 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-LG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.918 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Thumbnail Icon in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.221 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download12"
def selectorContainer = "#contentblock12 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-Icon-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Has sample icon line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} span.card-icon").size() != 0
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.427 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.005 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.731 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.444 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.333 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.850 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download13"
def selectorContainer = "#contentblock13 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.667 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.007 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.146 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.568 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.727 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Thumbnail using Asset DAM Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.272 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download14"
def selectorContainer = "#contentblock14 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Asset-DAM-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .btn").text().toLowerCase() == "Download".toLowerCase()
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.804 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.481 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.733 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.045 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.715 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Thumbnail using Thumbnail DAM Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.310 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download15"
def selectorContainer = "#contentblock15 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} div.info").text().contains("jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.376 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.578 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.154 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.087 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.741 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Thumbnail using Thumbnail DAM Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.749 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download16"
def selectorContainer = "#contentblock16 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Thumbnail-using-Thumbnail-DAM-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains(".thumbnail.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-title").text() == "Asset Title"
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-description").text() == "Asset Description"
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .card-info").text().contains("jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.558 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.309 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.674 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.191 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.655 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Custom Thumbnail Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.629 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download17"
def selectorContainer = "#contentblock17 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Custom-Thumbnail-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.423 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XS-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.272 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-SM-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.594 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-MD-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.917 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-LG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.996 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Card with Custom Thumbnail Rendition in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.477 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download18"
def selectorContainer = "#contentblock18 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Card-with-Custom-Thumbnail-Rendition-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Does not use Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href")) == false
----

| 
|====

* **And** Uses Thumbnail Asset Rendition

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains("/thumbnail.img.")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .card-description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .card-info","jpeg file")
----

| 
|====

* **And** Has button line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .btn","Download")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.575 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XS-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.399 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-SM-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.423 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-MD-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.322 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-LG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.688 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Width Set in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.419 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download19"
def selectorContainer = "#contentblock19 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** All images have loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitForImagesToLoad2($("img"))
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Width-Set-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has width specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailwidth").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.318 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XS-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XS-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 320 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.550 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-SM-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-SM-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 640 and height: 480

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.830 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-MD-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-MD-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1024 and height: 768

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.063 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-LG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-LG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1366 and height: 1024

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.214 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 1920 and height: 1280

=====

=== Functionality of Component Variant: Simple with Thumbnail using Asset DAM Rendition and Height Set in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.819 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "Download"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#download20"
def selectorContainer = "#contentblock20 .contents"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have sample content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().startsWith("Asset Title")
takeScreenshot($(selector).firstElement(), "Should have sample content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XXLG-Should-have-sample-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/download/DownloadPublishSpec/Functionality-of-Component-Variant-Simple-with-Thumbnail-using-Asset-DAM-Rendition-and-Height-Set-in-XXLG-Should-have-sample-content.png"]

|====

* **And** Uses Asset Rendition as thumbnail

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} img").attr("src").contains($("${selector}").attr("href"))
----

| 
|====

* **And** Thumbnail has height specified

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector}").attr("thumbnailheight").equals("50")
----

| 
|====

* **And** Has title line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .title","Asset Title")
----

| 
|====

* **And** Has description line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextIgnoreCase("${selector} .description","Asset Description")
----

| 
|====

* **And** Has info line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert compareInnerTextContains("${selector} .info","jpeg file")
----

| 
|====

* **And** Has license line

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $("${selector} .license").isEmpty()
----

| 
|====

* **Where:** Browser size width: 2560 and height: 1440

=====

