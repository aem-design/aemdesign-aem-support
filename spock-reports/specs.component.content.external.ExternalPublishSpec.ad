= Report for specs.component.content.external.ExternalPublishSpec
// toc-title definition MUST follow document title without blank line!
:toc-title: Table of Contents
:sectnums:

[small]#created on Tue Jul 23 05:51:49 UTC 2019 by root#



== Summary

[options="header",cols="asciidoc,asciidoc"]
|====
|Total Runs        |Success Rate                           |Total time                        |Failures          |Errors          |Skipped
|24|100.0% |2 minutes, 36.981 seconds |0 |0 |0
|====

== Features

=== Functionality of Component Variant: iFrame with Parameters in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.583 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XS-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XS-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame with Parameters in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.132 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-SM-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-SM-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame with Parameters in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.089 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-MD-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-MD-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame with Parameters in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.353 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-LG-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-LG-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame with Parameters in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.667 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XLG-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XLG-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame with Parameters in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.999 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is set to 600

* **And** >"Height" is set to 900

* **And** >"No" is selected in "Show Scrollbar" selection

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external1"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external1") {  $("#external-page1-text") } }
----

| 
|====

* **And** Should have sample content in iFrame 600x900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external1") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame 600x900")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XXLG-Should-have-sample-content-in-iFrame-600x900.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-with-Parameters-in-XXLG-Should-have-sample-content-in-iFrame-600x900.png"]

|====

* **And** I should be able to see the width of the iframe is set to 600

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("width") == "600"
----

| 
|====

* **And** I should be able to see the height of the iframe is set to 900

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("height") == "900"
----

| 
|====

* **And** I should not see the horizontal and vertical scroll bar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).attr("scrolling") == "false"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.979 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XS-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XS-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.627 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-SM-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-SM-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.000 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-MD-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-MD-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.514 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-LG-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-LG-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 7.484 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XLG-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XLG-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: iFrame without Parameters in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 8.019 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

* **And** >"Width" is leave blank

* **And** >"Height" is leave blank

* **And** >"Show Scrollbar" selection leave as default (default = "Yes")

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external2"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Its external content is loaded

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
waitFor { withFrame("external2") { "#external-page1-text" } }
----

| 
|====

* **And** Should have sample content in iFrame with scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
withFrame("external2") { browser.page.find("#external-page1-text").text().trim().toLowerCase() == "External Page Content 1".toLowerCase() }
takeScreenshot($(selector).firstElement(), "Should have sample content in iFrame with scrollbar")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XXLG-Should-have-sample-content-in-iFrame-with-scrollbar.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-iFrame-without-Parameters-in-XXLG-Should-have-sample-content-in-iFrame-with-scrollbar.png"]

|====

* **And** I should see the horizontal and vertical scrollbar

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
$(selector).attr("scrolling") == "yes"
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.283 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.599 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.313 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.554 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 5.745 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: SSI Include in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.181 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external3"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have SSI Include tag

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).getAttribute("innerHTML").contains("#include")
----

| 
|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in XS **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.626 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XS-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XS-Should-have-imported-content.png"]

|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in SM **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.581 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-SM-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-SM-Should-have-imported-content.png"]

|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in MD **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 6.855 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-MD-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-MD-Should-have-imported-content.png"]

|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in LG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.811 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-LG-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-LG-Should-have-imported-content.png"]

|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in XLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 4.228 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XLG-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XLG-Should-have-imported-content.png"]

|====

* **Where:** 

=====

=== Functionality of Component Variant: Server Import in XXLG **PASS** [big]#icon:check-circle[role="green"]#

=====



Result: **PASS** [big]#icon:check-circle[role="green"]#
Time: 3.909 seconds

* **Given:** >the page hierarchy is created as "Components" > "Content" > "External"

* **And** >I am in the component showcase page

* **And** >the component is on the showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def selector = "#external4"
----

| 
|====

* **When** I am on the component showcase page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
setWindowSize(viewport)
waitForAuthorPreviewPage()
----

| 
|====

* **Then** The component should be on the page

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
def component = waitForComponent(selector)
----

| 
|====

* **And** Should have imported content

[cols="2,1"]
|====

a|[source,groovy,linenums]
----
assert $(selector).text().trim().contains("Adobe")
takeScreenshot($(selector).firstElement(), "Should have imported content")
----

a|  .Current
image:../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XXLG-Should-have-imported-content.png[width="95%",pdfwidth="100%",scaledwidth="95%",link="../../../remote-seleniumhub-chrome/test-screenshots/RemoteWebDriver/specs/component/content/external/ExternalPublishSpec/Functionality-of-Component-Variant-Server-Import-in-XXLG-Should-have-imported-content.png"]

|====

* **Where:** 

=====

