#!/bin/bash

PARENT_PROJECT_PATH="$(realpath ..)"
SCRIPT_PARAMS="$@"
SKIP_PRINT_CONFIG=true

source "../scripts/functions.sh"

# get default from exported variables
TEST_SELENIUMHUB_SCHEME=${SELENIUMHUB_SCHEME:-http}
TEST_SELENIUMHUB_PORT=${SELENIUMHUB_PORT:-32768}
TEST_SELENIUMHUB_SERVICE=${SELENIUMHUB_SERVICE:-/wd/hub}

# Test defaults
TEST_SELENIUM_URL=""  # "${TEST_SELENIUMHUB_SCHEME}://${LOCAL_IP}:${TEST_SELENIUMHUB_PORT}${TEST_SELENIUMHUB_SERVICE}"
TEST_IMAGE="aemdesign/centos-java-buildpack"
TEST_OPEN_REPORT=false
TEST_REPORT_PATH="generated-docs/summary.html"
TEST_DRIVER_NAME="remote-seleniumhub-chrome"
TEST_SCHEME="$AEM_SCHEME"
TEST_HOST="$AEM_HOST"
TEST_PORT="$AEM_PORT"
TEST_USERNAME="$AEM_USER"
TEST_PASSWORD="$AEM_PASS"
TEST_SPECS="$(cat test-list | tr '\n' ',')"
TEST_WORKSPACE=""
TEST_LOGIN=false
TEST_MAVEN_CONFIG=""
TEST_DISPATCHER=false
TEST_SKIP_CONVERT=false
TEST_USING_MAVEN=false

debugOn

getMavenCommand() {
  local DISPATCHER=${1}
  local DRIVER=${2}
  local HOST=${3}
  local LOGIN=${4}
  local MAVEN_CONFIG=${5}
  local PASSWORD=${6}
  local PORT=${7}
  local SCHEME=${8}
  local SPECS=${9}
  local SELENIUM_URL=${10}
  local USERNAME=${11}

  if [[ ${TEST_SKIP_CONVERT} == "false" ]]; then
    MAVEN_EXTRAS="-P compile-reports-ruby"
  fi

  COMMAND="mvn clean test ${MAVEN_EXTRAS} -Dgeb.env="${DRIVER}" -Dproject.buildDirectory="${DRIVER}" -Dcrx.scheme="${SCHEME}" -Dcrx.host="${HOST}" -Dcrx.port="${PORT}" -Dcrx.username="${USERNAME}" -Dcrx.password="${PASSWORD}" -Dtest="${SPECS}" -Dselenium.huburl="${SELENIUM_URL}" -Dlogin.req="${LOGIN}" -Dtest.dispatcher="${DISPATCHER}" ${MAVEN_CONFIG}"

  echo ${COMMAND}
}

getGitDir() {
  echo $(git rev-parse --git-dir | sed -e 's/\(.*\)\.git.*/\1/')
}


runTest() {
  local DRIVER=${1}
  local MAVEN_COMMAND=$(getMavenCommand "${TEST_DISPATCHER}" "${DRIVER}" "${TEST_HOST}" "${TEST_LOGIN}" "${TEST_MAVEN_CONFIG}" "${TEST_PASSWORD}" "${TEST_PORT}" "${TEST_SCHEME}" "${TEST_SPECS}" "${TEST_SELENIUM_URL}" "${TEST_USERNAME}")

  printSectionBanner "RUNNING TEST FOR DRIVER: ${DRIVER}"

  printSectionLine "Maven MAVEN_COMMAND:"
  debug "${MAVEN_COMMAND}"

  # Check if the container exists
  if [[ ! "$(${DOCKER} ps -q -f name=${DRIVER})" ]]; then
      if [[ "$(${DOCKER} ps -aq -f status=exited -f name=${DRIVER})" ]]; then
        # cleanup
        printSectionLine "Removing container:"
        ${DOCKER} rm ${DRIVER}
      fi

      local PROJECT_ROOT_DIR="${PARENT_PROJECT_PATH}"
      local MAVEN_DIR="$(realpath ~/.m2)"

      if [[ "$OS" == "windows" ]]; then
        PROJECT_ROOT_DIR=$(fixPath "$PROJECT_ROOT_DIR")
        MAVEN_DIR="$(fixPath "$MAVEN_DIR")"
      elif [[ "$OS" == "windowsbash" ]]; then
        MAVEN_DIR="/mnt/c/Users/$USER/.m2"
        PROJECT_ROOT_DIR="$(cd .. && pwd)"
      else
        PROJECT_ROOT_DIR=$(fixPath "$PROJECT_ROOT_DIR")
        MAVEN_DIR="$(fixPath "$MAVEN_DIR")"
      fi

      printSectionLine "Project Root Directory: ${PROJECT_ROOT_DIR}"
      printSectionLine "Maven Directory: ${MAVEN_DIR}"

      if [[ ! ${TEST_USING_MAVEN} == "true" ]]; then

        PARENT_PROJECT_WITH_GIT=$(getGitDir)
        PARENT_PROJECT_LOCATION=${CURRENT_PATH#"$PARENT_PROJECT_WITH_GIT"}
        PARENT_PROJECT_NAME=$(basename $PARENT_PROJECT_WITH_GIT)

        printSectionLine "Parent GIT Directory: ${PARENT_PROJECT_WITH_GIT}"
        printSectionLine "Parent Project Name: ${PARENT_PROJECT_NAME}"
        printSectionLine "Testing Directory: ${CURRENT_PATH}"
        printSectionLine "Testing Sub Directory: ${PARENT_PROJECT_LOCATION}"

        # run docker container as current use
        # set work directory to be current project
        # mount parent project directory into build
        # mount .m2 into /build/.m2 as we are running as user
        # pass maven command location for .m2 dir
        # run bash with login to allow usage of RVM
        # auto-remove container after its done
        DOCKER_COMMAND="${DOCKER} run -d --user $(id -u):$(id -g) --rm --name ${DRIVER} -v ${PARENT_PROJECT_WITH_GIT}:/build/${PARENT_PROJECT_NAME} -v ${MAVEN_DIR}:/build/.m2 -w "/build/${PARENT_PROJECT_NAME}/${PARENT_PROJECT_LOCATION}" ${TEST_IMAGE} bash -l -c \"${MAVEN_COMMAND} -Dmaven.repo.local=/build/.m2/repository\""

        debug "${DOCKER_COMMAND}"

        eval ${DOCKER_COMMAND}

        printSubSectionStart "Docker Command Execute"
        printSubSectionEnd "Docker Command Execute"
      else
        printSubSectionStart "Direct Maven Command Execute"
        debug "${MAVEN_COMMAND}"
        cd .. && ${MAVEN_COMMAND} && cd -
        printSubSectionEnd "Direct Maven Command Execute"
      fi

  else
      printSectionLine "Container is already running: $DRIVER"
  fi
}

runTests() {
  declare -a DRIVERS_EXEC=($@)

  local DRIVERS_EXEC_LENGTH=${#DRIVERS_EXEC[@]}

  for (( i = 1; i < ${DRIVERS_EXEC_LENGTH} + 1; i++ )); do
    ITEM_VALUE=${DRIVERS_EXEC[$i-1]}

    printSectionLine "Starting test: [$i/${DRIVERS_EXEC_LENGTH}] $ITEM_VALUE"
    runTest "$ITEM_VALUE"
  done
}

# open reports after they have been generated
openReports() {
  declare -a OPEN_REPORTS=($@)

  local OPEN_REPORTS_LENGTH=${#OPEN_REPORTS[@]}

  printSubSectionStart "Open Reports"

  printSectionLine "REPORTS: $@"

  # Walk thought reports and see if the reports are ready to open
  for (( i = 1; i < ${OPEN_REPORTS_LENGTH} + 1; i++ )); do
    ITEM_VALUE=${OPEN_REPORTS[$i-1]}

    printSectionLine "CHECKING REPORT: [$i/${OPEN_REPORTS_LENGTH}] $ITEM_VALUE"
    printSectionLine "OPENING REPORT: $ITEM_VALUE/$TEST_REPORT_PATH"

    OPEN_REPORT=$(groovy -Dproject.buildDirectory=${ITEM_VALUE} openReport.groovy)
  done


  printSubSectionEnd "Open Reports"
}

# monitor docker container and store into log file
monitorTests() {
  declare -a OPEN_REPORTS=($@)

  OPEN_REPORTS_LENGTH=${#OPEN_REPORTS[@]}

  if [[ ! -d "dockerlogs" ]]; then
    mkdir dockerlogs
  fi

  printSubSectionStart "Watch Logs and Save to Log file"

  local LOGFILE="dockerlogs/docker-log-stdout-$(date +%s).log"
  printSectionLine "CONTAINERS: ${OPEN_REPORTS}"
  printSectionLine "LOGFILE: ${LOGFILE}"
  ${DOCKER} logs -f $@ | tee -ai ${LOGFILE}

  printSubSectionEnd "Watch Logs and Save to Log file"

  if ${TEST_OPEN_REPORT}; then
    openReports "${OPEN_REPORTS[@]}"
  fi
}


function stopContainers() {

  printSectionLine "Stop Containers"

  printSectionLine "Stopping: $@"
  ${DOCKER} stop $@

  printSectionLine "Removing: $@"
  ${DOCKER} rm $@


}

testServer() {
  local ADDRESS="$@"
  local RESULT="$(${CURL} -L --write-out %{http_code} --connect-timeout 5 --max-time 5 --silent --output /dev/null ${ADDRESS} | ${GREP} -q "000" && echo false || echo true)"

  echo ${RESULT}
}

showHelp() {
cat << EOF
Usage: ./test-spec -L -D
Run the automation test suite against author, publisher or dispatcher.

  -h, --help            Display help
  -s, --scheme          Set the URI scheme, i.e. https
  -H, --host            Set the hostname/IP address of the server
  -p, --port            Set the server port
  -U, --username        Set the CRX username for the host
  -P, --password        Set the CRX password for the host
  -u, --url             Set the selenium hub URL
  -t, --tests           Set the Groovy specs
  -w, --workspace       Set the path to the current workspace/working directory
  -L, --login           Enables authenticated requests on the host                      (default: false)
  -c, --config          Custom Maven user settings file name
  -R, --report          Open the report when when it becomes available?                 (default: false)
  -D, --dispatcher      Toggles the test suite state so all WCM modes are disabled      (default: false)
  -S, --skip-convert    Skip the test report conversion at the end of the run           (default: false)
  -M, --maven           Run maven command directly, if running in docker container      (default: false)
EOF
}

# process command arguments and set environment variables
processArguments() {
  declare argv
  argv=$(getopt -o "hs:H:p:U:P:u:t:w:Lc:RDSM" --long "help,scheme:,host:,port:,username:,password:,url:,tests:,workspace:,login,config:,report,dispatcher,skip-convert,maven" -- "$@") || return
  eval "set -- ${argv}"
  declare a
  for a; do
    case ${a} in
      -h|--help)
        showHelp
        exit 0
        ;;
      -s|--scheme)
        export TEST_SCHEME=$2
        shift 2
        ;;
      -H|--host)
        export TEST_HOST=$2
        shift 2
        ;;
      -p|--port)
        export TEST_PORT=$2
        shift 2
        ;;
      -U|--username)
        export TEST_USERNAME=$2
        shift 2
        ;;
      -P|--password)
        export TEST_PASSWORD=$2
        shift 2
        ;;
      -u|--url)
        export TEST_SELENIUM_URL=$2
        shift 2
        ;;
      -t|--tests)
        export TEST_SPECS=$2
        shift 2
        ;;
      -w|--workspace)
        export TEST_WORKSPACE=$2
        shift 2
        ;;
      -L|--login)
        export TEST_LOGIN=true
        shift
        ;;
      -c|--config)
        export TEST_MAVEN_CONFIG=$2
        shift 2
        ;;
      -R|--report)
        export TEST_OPEN_REPORT=true
        shift
        ;;
      -D|--dispatcher)
        export TEST_DISPATCHER=true
        shift
        ;;
      -S|--skip-convert)
        export TEST_SKIP_CONVERT=true
        shift
        ;;
      -M|--maven)
        export TEST_USING_MAVEN=true
        shift
        ;;
      --)
        shift
        break;;
    esac
  done
}

main() {

  processArguments $@

  # update selenium url if localhost and not passed
  if [[ "${SELENIUMHUB_HOST}" == "localhost" && "$TEST_SELENIUM_URL" == "" ]]; then
    debug "Selenium hub url not specified or set to localhost, updating to use local ip" "info"
    TEST_SELENIUM_URL="${TEST_SELENIUMHUB_SCHEME}://${LOCAL_IP}:${TEST_SELENIUMHUB_PORT}${TEST_SELENIUMHUB_SERVICE}"
  fi

  #update host
  if [[ "${TEST_HOST}" == "localhost" ]]; then
    debug "Test host is set as localhost, updating to use local ip" "info"
    TEST_HOST="${LOCAL_IP}"
  fi

  # load default spect list if not passed
  if [[ "$TEST_SPECS" == "" ]]; then
    debug "Test Specs not specified loading defaults" "info"
    IFS=',' read -ra specs <<< "$TEST_SPECS"

    for i in "${specs[@]}"; do
      if [[ $(isStringMatchesRegex "${i}" ".*(Spec|\*)") == "false" ]]; then
        debug "'$i' does not conform to the spec naming convention, i.e. NewsListScreenshotSpec." "error"
        exit 1
      fi
    done
  fi

  # validate SCHEME
  if [[ "$(isStringMatchesRegex "${TEST_SCHEME}" "^http[s]{0,}.*" )" == "false" ]]; then
    debug "Invalid URI scheme given, it must be either 'http' or 'https'." "error"
    exit 1
  fi

  # validate port
  if [[ "$(isStringMatchesRegex "${TEST_PORT}" "^[0-9]{1,5}$" )" == "false" ]]; then
    debug "Invalid port number given, entry must be a number between 1-65535." "error"
    exit 1
  fi

  # set maven config
  if [[ "$(isStringMatchesRegex "${TEST_MAVEN_CONFIG}" "^config.*" )" == "true" ]]; then
    debug "Maven config specified, exporting." "info"
    export TEST_MAVEN_CONFIG="-s${TEST_MAVEN_CONFIG}"
  fi

  printSectionBanner "Test Configuration:" "warn"
  printSectionLine "Scheme:                 ${TEST_SCHEME}"
  printSectionLine "Host:                   ${TEST_HOST}"
  printSectionLine "Port:                   ${TEST_PORT}"
  printSectionLine "Selenium URL:           ${TEST_SELENIUM_URL}"
  printSectionLine "Test Specs:             ${TEST_SPECS}"
  printSectionLine "Workspace:              ${TEST_WORKSPACE:-N/A}"
  printSectionLine "Authenticate?           ${TEST_LOGIN}"
  printSectionLine "Custom Maven Config:    ${TEST_MAVEN_CONFIG:-N/A}"
  printSectionLine "Run on Dispatcher?      ${TEST_DISPATCHER}"
  printSectionLine "Skip Report Conversion? ${TEST_SKIP_CONVERT}"
  printSectionLine "Run plain Maven?        ${TEST_USING_MAVEN}"

  set_term_title "Testing In-Progress"

  # Begin the testing...
  printSectionBanner "Checking if Selenium Hub and AEM are available"

  AEM_AVAILABLE=$(testServer ${TEST_SCHEME}://${TEST_HOST}:${TEST_PORT})
  HUB_AVAILABLE=$(testServer ${TEST_SELENIUM_URL})

  printSectionLine "Is Selenium Hub at ${TEST_SELENIUM_URL} available? ${HUB_AVAILABLE}"
  printSectionLine "Is AEM at ${TEST_SCHEME}://${TEST_HOST}:${TEST_PORT} available? ${AEM_AVAILABLE}"

  if [[ "true" == "$HUB_AVAILABLE" && "true" == "$AEM_AVAILABLE" ]]; then
      debug "Selenium Hub and AEM are both up and available!" "info"

      runTests ${TEST_DRIVER_NAME}

      if [[ ! ${TEST_USING_MAVEN} == "true" ]]; then
        monitorTests ${TEST_DRIVER_NAME}
      fi
  else
      debug "Either Selenium Hub or AEM is not currently available!" "error"
      exit 1
  fi

  set_term_title "Testing Finished"
}


[[ $BASH_SOURCE != "$0" ]] || main "$@"
