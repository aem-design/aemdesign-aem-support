package specs.component.content.contenttemplate

import spock.lang.Stepwise
import spock.lang.Unroll
import support.ComponentSpec

@Stepwise
class ContentTemplatePublishSpec extends ComponentSpec {

    String pathPage = "component/content/contenttemplate"
    String pathSite = "content/aemdesign-showcase"
    String language = "au/en"
    String componentPath = "jcr:content/article/par/contentblock1/par/contenttemplate"

    def setupSpec() {
        loginAsAdmin()
    }

    @Unroll("Functionality of Component Variant: Using HTL Template in #viewport.label")
    def "Functionality of Component Variant: Using HTL Template"() {

        given: '>the page hierarchy is created as "Components" > "Content" > "Content Template"'
        and: '>I am in the component showcase page'
        and: '>the component is on the showcase page'
        def selector = "#contenttemplate1"

        when: "I am on the component showcase page"
        setWindowSize(viewport)
        waitForAuthorPreviewPage()

        then: "The component should be on the page"
        def component = waitForComponent(selector)

        and: 'Should have text generated by from HTL Template Generic Details component in the page'
        assert compareInnerTextIgnoreCase("${selector}","In Page Generic Details Content")
        takeScreenshot($(selector).firstElement(), "Should have sample content")

        where:
        viewport << getViewPorts()
    }

    @Unroll("Functionality of Component Variant: Using Custom Template in #viewport.label")
    def "Functionality of Component Variant: Using Custom Template"() {

        given: '>the page hierarchy is created as "Components" > "Content" > "Content Template"'
        and: '>I am in the component showcase page'
        and: '>the component is on the showcase page'
        def selector = "#contenttemplate2"

        when: "I am on the component showcase page"
        setWindowSize(viewport)
        waitForAuthorPreviewPage()

        then: "The component should be on the page"
        def component = waitForComponent(selector)

        and: 'Should have text generated by from Custom Template Generic Details component in the page'
        assert compareInnerTextIgnoreCase("${selector}","In Page Generic Details Content")
        takeScreenshot($(selector).firstElement(), "Should have text generated by from Custom Template Generic Details component in the page")

        where:
        viewport << getViewPorts()
    }


}
